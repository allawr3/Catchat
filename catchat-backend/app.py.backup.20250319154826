import os
import json
import time
import logging
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from openai import OpenAI
from dotenv import load_dotenv
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
import mysql.connector
from mysql.connector import Error
import re
import hashlib
import uuid
from functools import lru_cache

# Configure logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='/root/catchat-backend/backend.log',
    filemode='a'
)
logger = logging.getLogger("catchat")

# Log startup
logger.info("====== APPLICATION STARTING ======")

# Load API key from .env file
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    logger.error("Error: OPENAI_API_KEY not found. Check your .env file!")
    raise ValueError("Error: OPENAI_API_KEY not found. Check your .env file!")

# MySQL connection configuration from environment variables
MYSQL_CONFIG = {
    'host': os.getenv('MYSQL_HOST'),
    'user': os.getenv('MYSQL_USER'),
    'password': os.getenv('MYSQL_PASSWORD'),
    'database': os.getenv('MYSQL_DATABASE')
}

logger.info(f"MySQL configuration: host={MYSQL_CONFIG['host']}, database={MYSQL_CONFIG['database']}")

# Initialize OpenAI client with the new API
client = OpenAI(api_key=OPENAI_API_KEY)

# Initialize MySQL connection
mysql_conn = None

# Initialize FastAPI
app = FastAPI(title="Catchat Backend")

# Add CORS middleware to allow cross-origin requests
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://www.qcatchat.com", "https://qcatchat.com"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],
    allow_headers=["Content-Type", "Authorization", "X-Requested-With"],
)

# Define request models
class ChatCompletionRequest(BaseModel):
    model: str = "gpt-4"
    messages: list
    temperature: float = 0.7
    max_tokens: int = 1000

class ChatRequest(BaseModel):
    message: str
    mode: Optional[str] = "standard"
    quantum_computer: Optional[str] = "simulator"
    qubits: Optional[int] = 9
    user_id: Optional[str] = "1"  # Default to user_id 1

def get_mysql_connection():
    global mysql_conn
    try:
        if mysql_conn is None or not mysql_conn.is_connected():
            logger.info("Establishing new MySQL connection")
            mysql_conn = mysql.connector.connect(**MYSQL_CONFIG)
            logger.info("MySQL connection established successfully")
        return mysql_conn
    except Error as e:
        logger.error(f"MySQL connection error: {e}")
        return None

def get_valid_user_id(user_id="1"):
    """Get a valid user ID from the database"""
    try:
        logger.debug(f"Validating user_id: {user_id}")
        # Convert to integer if possible
        if isinstance(user_id, str) and user_id.isdigit():
            user_id = int(user_id)
        else:
            # Use default user
            user_id = 1
            logger.debug("Using default user_id: 1")

        # Verify user exists
        conn = get_mysql_connection()
        if conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM users WHERE id = %s", (user_id,))
            result = cursor.fetchone()
            cursor.close()

            if result:
                logger.debug(f"Valid user_id found: {user_id}")
                return user_id
            else:
                # Use first available user
                logger.debug("User not found, looking for first available user")
                cursor = conn.cursor()
                cursor.execute("SELECT id FROM users LIMIT 1")
                result = cursor.fetchone()
                cursor.close()

                if result:
                    logger.debug(f"Using first available user_id: {result[0]}")
                    return result[0]
                else:
                    logger.error("No users found in database")
                    return None
    except Error as e:
        logger.error(f"Error finding valid user: {e}")
    return None

def save_to_mysql(user_id, message, mode="standard", response=None):
    try:
        logger.debug(f"Saving to MySQL - user_id: {user_id}, mode: {mode}")
        # Get valid user ID
        valid_user_id = get_valid_user_id(user_id)
        if not valid_user_id:
            logger.error("No valid user found in database")
            return False

        conn = get_mysql_connection()
        if conn:
            cursor = conn.cursor()

            # Save to chat_history table
            try:
                query = """INSERT INTO chat_history (user_id, message, response) VALUES (%s, %s, %s)"""
                cursor.execute(query, (valid_user_id, message, response))
                logger.info(f"Successfully inserted into chat_history for user {valid_user_id}")
            except Error as e:
                logger.error(f"Error inserting into chat_history: {e}")
                return False

            # Save to user_interactions table
            try:
                query = """INSERT INTO user_interactions (user_id, action_type) VALUES (%s, %s)"""
                cursor.execute(query, (valid_user_id, f"chat_{mode}"))
                logger.info(f"Successfully inserted into user_interactions for user {valid_user_id}")
            except Error as e:
                logger.error(f"Error inserting into user_interactions: {e}")
                # Continue even if this fails

            # Save to user_preferences table
            try:
                query = """INSERT IGNORE INTO user_preferences (user_id, preferences) VALUES (%s, %s)"""
                preference_json = f'{{"mode":"{mode}"}}'
                cursor.execute(query, (valid_user_id, preference_json))
                logger.info(f"Successfully inserted into user_preferences for user {valid_user_id}")
            except Error as e:
                logger.error(f"Error inserting into user_preferences: {e}")
                # Continue even if this fails

            conn.commit()
            cursor.close()
            return True
    except Error as e:
        logger.error(f"Error saving to MySQL: {e}")
    return False

def format_response(raw_response: str) -> dict:
    if "Summary:" in raw_response and "Details:" in raw_response:
        try:
            summary_part = raw_response.split("Summary:")[1].split("Details:")[0].strip()
            details_part = raw_response.split("Details:")[1].strip()
            return {"summary": summary_part, "details": details_part}
        except Exception:
            pass
    return {"summary": "", "details": raw_response}

def detect_quantum_intent(message):
    """Detect if message contains intent for quantum application"""
    try:
        logger.debug(f"Detecting quantum intent for message: {message}")
        conn = get_mysql_connection()
        if conn:
            cursor = conn.cursor(dictionary=True)

            # Get all intent patterns
            cursor.execute("SELECT * FROM quantum_intent_mapping")
            intents = cursor.fetchall()
            cursor.close()

            message_lower = message.lower()
            logger.debug(f"Found {len(intents)} intent patterns to check")

            # Check each intent pattern
            for intent in intents:
                if re.search(intent['intent_pattern'], message_lower, re.IGNORECASE):
                    logger.info(f"Quantum intent detected: {intent['quantum_application_id']}")
                    # Extract parameters if pattern exists
                    params = None
                    if intent['parameter_extraction_pattern']:
                        param_match = re.search(intent['parameter_extraction_pattern'], message, re.IGNORECASE)
                        if param_match:
                            params = param_match.group(1)

                    return {
                        'application_id': intent['quantum_application_id'],
                        'confidence': intent['confidence_threshold'],
                        'parameters': params
                    }
        
        logger.debug("No quantum intent detected")
        return None
    except Exception as e:
        logger.error(f"Error detecting quantum intent: {e}")
        return None

def update_user_quantum_preferences(user_id, application_id):
    """Update user quantum preferences based on usage"""
    try:
        logger.debug(f"Updating quantum preferences - user_id: {user_id}, app_id: {application_id}")
        conn = get_mysql_connection()
        if not conn:
            return False

        cursor = conn.cursor(dictionary=True)

        # Check if user already has preferences
        cursor.execute("SELECT * FROM user_quantum_preferences WHERE user_id = %s", (user_id,))
        preferences = cursor.fetchone()

        if preferences:
            # User exists, update usage stats
            usage_stats = json.loads(preferences['usage_stats'] or '{}')
            app_id_str = str(application_id)

            if app_id_str in usage_stats:
                usage_stats[app_id_str] += 1
            else:
                usage_stats[app_id_str] = 1

            # Update favorite applications based on usage
            favorites = sorted(usage_stats.items(), key=lambda x: x[1], reverse=True)[:5]
            favorite_apps = [int(k) for k, v in favorites]

            # Update the record
            cursor.execute("""
                UPDATE user_quantum_preferences
                SET usage_stats = %s, favorite_applications = %s, last_updated = NOW()
                WHERE user_id = %s
            """, (json.dumps(usage_stats), json.dumps(favorite_apps), user_id))

        else:
            # Create new user preference
            usage_stats = {str(application_id): 1}
            favorite_apps = [application_id]

            cursor.execute("""
                INSERT INTO user_quantum_preferences
                (user_id, favorite_applications, usage_stats)
                VALUES (%s, %s, %s)
            """, (user_id, json.dumps(favorite_apps), json.dumps(usage_stats)))

        conn.commit()
        cursor.close()
        return True

    except Exception as e:
        logger.error(f"Error updating user quantum preferences: {e}")
        return False

def generate_verification_data(user_id, application_id, quantum_result, raw_state):
    """Generate verification data for quantum operations"""
    try:
        operation_id = str(uuid.uuid4())

        # Create verification hash
        verification_string = f"{operation_id}:{user_id}:{application_id}:{raw_state}"
        verification_hash = hashlib.sha256(verification_string.encode()).hexdigest()

        # Store verification data
        conn = get_mysql_connection()
        if conn:
            cursor = conn.cursor()

            cursor.execute("""
                INSERT INTO quantum_operation_verification
                (operation_id, user_id, application_id, raw_qubits_state, verification_hash, hardware_used)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (operation_id, user_id, application_id, raw_state, verification_hash, "9q-square-noisy-qvm"))

            conn.commit()
            cursor.close()

        return {
            'operation_id': operation_id,
            'verification_hash': verification_hash
        }

    except Exception as e:
        logger.error(f"Error generating verification data: {e}")
        return None

def log_execution_performance(application_id, hardware_id, execution_time, success, error_message=None):
    """Log quantum application execution performance"""
    try:
        conn = get_mysql_connection()
        if not conn:
            return False

        cursor = conn.cursor()

        # Log this execution
        cursor.execute("""
            INSERT INTO application_execution_logs
            (application_id, hardware_id, execution_time, success, error_message)
            VALUES (%s, %s, %s, %s, %s)
        """, (application_id, hardware_id, execution_time, success, error_message))

        # Update hardware performance metrics
        cursor.execute("""
            SELECT
                COUNT(*) as total_executions,
                SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as successful_executions,
                AVG(execution_time) as avg_time
            FROM application_execution_logs
            WHERE application_id = %s AND hardware_id = %s
            AND timestamp > DATE_SUB(NOW(), INTERVAL 7 DAY)
        """, (application_id, hardware_id))

        stats = cursor.fetchone()

        if stats and stats[0] > 0:  # If we have executions
            total = stats[0]
            successful = stats[1]
            avg_time = stats[2]

            success_rate = successful / total if total > 0 else 0
            error_rate = 1 - success_rate

            # Update hardware performance table
            try:
                cursor.execute("""
                    INSERT INTO hardware_performance
                    (hardware_id, application_id, avg_execution_time, success_rate, error_rate, last_updated)
                    VALUES (%s, %s, %s, %s, %s, NOW())
                    ON DUPLICATE KEY UPDATE
                    avg_execution_time = %s,
                    success_rate = %s,
                    error_rate = %s,
                    last_updated = NOW()
                """, (hardware_id, application_id, avg_time, success_rate, error_rate,
                    avg_time, success_rate, error_rate))
            except Error as e:
                logger.error(f"Error updating hardware performance: {e}")

        conn.commit()
        cursor.close()
        return True

    except Exception as e:
        logger.error(f"Error logging execution performance: {e}")
        return False

def select_optimal_hardware(application_id, qubit_requirement, for_randomness=False):
    """
    Select the optimal quantum hardware based on performance history

    Parameters:
        application_id: ID of the quantum application
        qubit_requirement: Number of qubits needed
        for_randomness: Whether the application requires randomness
    """
    try:
        conn = get_mysql_connection()
        if not conn:
            # Default to noisy QVM for randomness applications
            return "9q-square-noisy-qvm" if for_randomness else "9q-square-qvm"

        cursor = conn.cursor(dictionary=True)

        # Check if application requires randomness
        if for_randomness:
            return "9q-square-noisy-qvm"  # Default for randomness

        # Get hardware performance data
        try:
            query = """
                SELECT hp.hardware_id, hp.success_rate, hp.avg_execution_time, qsc.qubit_count, hp.is_free
                FROM hardware_performance hp
                JOIN quantum_systems_catalog qsc ON hp.hardware_id = qsc.system_name
                WHERE hp.application_id = %s
                AND qsc.qubit_count >= %s
                ORDER BY hp.is_free DESC, hp.success_rate DESC, hp.avg_execution_time ASC
                LIMIT 1
            """

            cursor.execute(query, (application_id, qubit_requirement))
            result = cursor.fetchone()
            cursor.close()

            if result:
                return result['hardware_id']
        except Error as e:
            logger.error(f"Error querying hardware performance: {e}")

        # Default hardware selection
        if qubit_requirement > 6:
            return "9q-square-qvm"  # Larger QVM for more qubits
        else:
            return "9q-square-noisy-qvm" if for_randomness else "9q-square-qvm"

    except Exception as e:
        logger.error(f"Error selecting optimal hardware: {e}")
        return "9q-square-noisy-qvm" if for_randomness else "9q-square-qvm"

def get_available_quantum_systems():
    """Retrieve information about available quantum systems"""
    try:
        logger.info("Fetching available quantum systems from database")
        conn = get_mysql_connection()
        if not conn:
            logger.error("Failed to establish MySQL connection")
            return None

        cursor = conn.cursor(dictionary=True)

        query = """
        SELECT
            system_name as name,
            qubit_count as qubits,
            system_type as type,
            is_free,
            requires_api_key,
            description
        FROM quantum_systems_catalog
        ORDER BY is_free DESC, qubit_count DESC
        """

        cursor.execute(query)
        systems = cursor.fetchall()
        cursor.close()

        logger.info(f"Successfully retrieved {len(systems)} quantum systems from database")

        # Format for response
        result = {
            "systems": systems,
            "total_count": len(systems),
            "free_systems_count": sum(1 for s in systems if s['is_free']),
            "paid_systems_count": sum(1 for s in systems if not s['is_free'])
        }
        
        # Log to verify data looks correct
        logger.debug(f"Quantum systems data: {json.dumps(result)}")
        
        return result

    except Exception as e:
        logger.error(f"Error retrieving quantum systems: {e}", exc_info=True)
        # Fallback to hardcoded response if database query fails
        fallback_data = {
            "systems": [
                {
                    "name": "9q-square-qvm",
                    "qubits": 9,
                    "type": "QVM",
                    "is_free": True,
                    "requires_api_key": False,
                    "description": "A 9-qubit quantum virtual machine in a square topology."
                },
                {
                    "name": "9q-square-noisy-qvm",
                    "qubits": 9,
                    "type": "Noisy QVM",
                    "is_free": True,
                    "requires_api_key": False,
                    "description": "A 9-qubit noisy quantum virtual machine in a square topology."
                },
                {
                    "name": "Ankaa-3",
                    "qubits": 84,
                    "type": "QPU",
                    "is_free": False,
                    "requires_api_key": True,
                    "description": "Rigetti Ankaa-3 quantum processing unit."
                }
            ],
            "total_count": 3,
            "free_systems_count": 2,
            "paid_systems_count": 1
        }
        logger.warning(f"Using fallback data for quantum systems: {json.dumps(fallback_data)}")
        return fallback_data

@app.get("/")
def read_root():
    return {"message": "Welcome to Catchat!"}

@app.get("/test-db")
def test_db():
    """Test endpoint to verify database saving works"""
    try:
        valid_user_id = get_valid_user_id(1)
        if not valid_user_id:
            return {"success": False, "message": "No valid user found in database"}

        conn = get_mysql_connection()
        if conn:
            cursor = conn.cursor()

            # Test insert using a valid user_id
            query = "INSERT INTO chat_history (user_id, message, response) VALUES (%s, %s, %s)"
            cursor.execute(query, (valid_user_id, "Test message from API", "Test response"))

            # Commit the transaction
            conn.commit()
            cursor.close()
            return {"success": True, "message": f"Test data inserted successfully with user ID {valid_user_id}"}
        else:
            return {"success": False, "message": "Could not establish database connection"}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.get("/chat/{user_input}")
async def chat_get(user_input: str):
    try:
        # Detect quantum intent
        intent = detect_quantum_intent(user_input)

        if intent:
            # Handle quantum intent similar to post endpoint
            return await handle_quantum_intent(intent, user_input, 1)

        # Standard response if no quantum intent detected
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "You are the user interface to various Quantum Computers. You are also an helpful assistant"},
                {"role": "user", "content": user_input},
            ],
            temperature=0.7,
            max_tokens=1000
        )
        raw_reply = response.choices[0].message.content.strip()
        structured_reply = format_response(raw_reply)

        # Save to database
        save_to_mysql(1, user_input, "standard", raw_reply)

        return {"response": structured_reply}
    except Exception as e:
        logger.error(f"Error in chat_get: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

async def handle_quantum_intent(intent, message, user_id):
    """Handle a detected quantum intent"""
    start_time = time.time()
    logger.info(f"Handling quantum intent: application_id={intent['application_id']}")

    # Get application info
    application_id = intent['application_id']

    try:
        conn = get_mysql_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM quantum_applications WHERE id = %s", (application_id,))
        application = cursor.fetchone()
        cursor.close()

        if not application:
            logger.error(f"Quantum application not found: id={application_id}")
            raise HTTPException(status_code=404, detail="Quantum application not found")

        logger.info(f"Found quantum application: {application['name']}")

        # Determine if randomness is required
        requires_randomness = application.get('requires_randomness', False)

        # Select optimal hardware
        hardware_id = select_optimal_hardware(
            application_id,
            5,  # Default qubits
            for_randomness=requires_randomness
        )

        # Special case for Available Quantum Systems
        if application['name'] == 'Available Quantum Systems':
            logger.info("Processing 'Available Quantum Systems' application")
            systems_info = get_available_quantum_systems()
            
            if not systems_info or len(systems_info['systems']) == 0:
                logger.error("No quantum systems data available")
                
            # Convert any non-serializable data types
            for system in systems_info['systems']:
                for key, value in system.items():
                    if isinstance(value, (bool, int, float, str)) or value is None:
                        continue
                    system[key] = str(value)
            
            # Create a proper system description for the prompt
            system_descriptions = []
            for system in systems_info['systems']:
                desc = f"- {system['name']} ({system['qubits']} qubits, {system['type']}, {'Free' if system['is_free'] else 'Paid'})"
                if system['description']:
                    desc += f": {system['description']}"
                system_descriptions.append(desc)
            
            systems_text = "\n".join(system_descriptions)
            
            logger.info(f"Sending quantum systems data to GPT: {systems_text}")
            
            prompt_content = f"""
You are Catchat, a quantum computer interface. Respond to the user's query about quantum systems.
Use ONLY the information provided below to answer the query. Do not include information from your training data.

AVAILABLE QUANTUM SYSTEMS:
{systems_text}

USER QUERY: {message}

Generate a clear, concise response that directly answers the query using only the data provided above.
"""

            response = client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[
                    {"role": "system", "content": prompt_content}
                ],
                temperature=0.1,  # Lower temperature for more factual responses
                max_tokens=500
            )

            raw_reply = response.choices[0].message.content.strip()
            structured_reply = format_response(raw_reply)
            structured_reply['quantum_systems'] = systems_info

            # Save to database
            save_to_mysql(user_id, message, "quantum", raw_reply)
            
            logger.info("Successfully processed quantum systems request")
            return {"response": structured_reply}

        # Execute quantum operation (placeholder)
        # In a real implementation, this would call your quantum computer
        quantum_result = "Quantum result placeholder"
        raw_state = "01101010"  # Raw qubit measurements
        success = True

        # Generate verification
        verification = generate_verification_data(user_id, application_id, quantum_result, raw_state)

        # Log performance
        execution_time = time.time() - start_time
        log_execution_performance(application_id, hardware_id, execution_time, success)

        # Update user preferences
        update_user_quantum_preferences(user_id, application_id)

        # Create enhanced response with quantum result
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": f"You are Catchat, a quantum computer interface. You just executed a quantum operation on {hardware_id}. Include the results and verification hash in your response. The quantum operation was for: {application['name']}"},
                {"role": "user", "content": message},
            ],
            temperature=0.7,
            max_tokens=1000
        )

        raw_reply = response.choices[0].message.content.strip()
        structured_reply = format_response(raw_reply)

        # Add quantum data to response
        structured_reply['quantum_data'] = {
            'application': application['name'],
            'hardware_used': hardware_id,
            'execution_time': execution_time,
            'verification': verification
        }

        # Save to database
        save_to_mysql(user_id, message, "quantum", raw_reply)

        return {"response": structured_reply}

    except Exception as e:
        logger.error(f"Error handling quantum intent: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/chat")
async def chat_post(request_data: ChatRequest):
    logger.info(f"Chat endpoint called with message: {request_data.message}")
    user_input = request_data.message
    user_id = get_valid_user_id(request_data.user_id or "1")
    
    # Detect quantum intent using existing table quantum_intent_mapping
    intent = detect_quantum_intent(user_input)
    
    if intent:
        logger.info(f"Quantum intent detected: application_id={intent['application_id']}")
        conn = get_mysql_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute(
            "SELECT * FROM quantum_applications WHERE id = %s",
            (intent['application_id'],)
        )
        application = cursor.fetchone()
        
        if application and application['name'] == 'Available Quantum Systems':
            logger.info("Processing request for available quantum systems")
            
            # Fetch actual systems from quantum_systems_catalog
            try:
                logger.debug("Executing query to fetch quantum systems")
                cursor.execute("""
                    SELECT system_name AS name, qubit_count AS qubits, system_type AS type,
                    is_free, requires_api_key, description
                    FROM quantum_systems_catalog
                """)
                systems = cursor.fetchall()
                logger.info(f"Retrieved {len(systems)} quantum systems from database")
                logger.debug(f"First system data: {json.dumps(systems[0]) if systems else 'None'}")
                
                cursor.close()
                
                systems_info = {
                    "systems": systems,
                    "total_count": len(systems),
                    "free_systems_count": sum(1 for s in systems if s['is_free']),
                    "paid_systems_count": sum(1 for s in systems if not s['is_free'])
                }
                
                # If MindsDB/MySQL has data
                if systems:
                    logger.info("Using database data for quantum systems response")
                    
                    # Create a proper system description for the prompt
                    system_descriptions = []
                    for system in systems:
                        # Convert any non-serializable types
                        for key, value in system.items():
                            if not isinstance(value, (bool, int, float, str)) and value is not None:
                                system[key] = str(value)
                                
                        desc = f"- {system['name']} ({system['qubits']} qubits, {system['type']}, {'Free' if system['is_free'] else 'Paid'})"
                        if system['description']:
                            desc += f": {system['description']}"
                        system_descriptions.append(desc)
                    
                    systems_text = "\n".join(system_descriptions)
                    
                    prompt_content = f"""
You are Catchat, a quantum computer interface. Respond to the user's query about quantum systems.
Use ONLY the information provided below to answer the query. Do not include information from your training data.

AVAILABLE QUANTUM SYSTEMS:
{systems_text}

USER QUERY: {user_input}

Generate a clear, concise response that directly answers the query using only the data provided above.
"""

                    logger.debug(f"Sending systems info to GPT: {systems_text}")
                    
                    response = client.chat.completions.create(
                        model="gpt-4-turbo",
                        messages=[
                            {"role": "system", "content": prompt_content}
                        ],
                        temperature=0.1,  # Lower temperature for more factual responses
                        max_tokens=500
                    )
                    
                    reply = response.choices[0].message.content.strip()
                    logger.info("Using GPT-4 fallback for quantum systems")
                    save_to_mysql(user_id, user_input, "quantum", reply)
                    return {"response": format_response(reply)}
            except Exception as e:
                logger.error(f"Error querying quantum systems: {e}", exc_info=True)
                # MindsDB/MySQL query failed; fallback to GPT-4
                prompt = [
                    {"role": "system", "content": "You are Catchat, a quantum computer interface. Provide information about available quantum systems."},
                    {"role": "user", "content": user_input}
                ]
                response = client.chat.completions.create(
                    model="gpt-4-turbo",
                    messages=prompt,
                    temperature=0.7,
                    max_tokens=1000
                )
                reply = response.choices[0].message.content.strip()
                logger.info("Using GPT-4 fallback after database error")
                save_to_mysql(user_id, user_input, "quantum", reply)
                return {"response": format_response(reply)}
        
        # Handle other quantum intents with the existing handle_quantum_intent function
        logger.info("Forwarding to handle_quantum_intent function")
        return await handle_quantum_intent(intent, user_input, user_id)

    # Standard chat response for non-quantum intents
    logger.info("No quantum intent detected, using standard GPT response")
    response = client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "You are the user interface to various Quantum Computers. You are also an helpful assistant"},
            {"role": "user", "content": user_input},
        ],
        temperature=0.7,
        max_tokens=1000
    )
    raw_reply = response.choices[0].message.content.strip()
    structured_reply = format_response(raw_reply)

    # Save to database
    save_to_mysql(
        user_id=user_id,
        message=user_input,
        mode=request_data.mode,
        response=raw_reply
    )

    logger.info("Chat request processed successfully")
    return {"response": structured_reply}

@app.post("/v1/chat/completions")
async def chat_completions(request_data: ChatCompletionRequest):
    # Implementation omitted for brevity
    pass

@app.get("/debug-version")
async def debug_version():
    """Debug endpoint to check if code is reloading"""
    return {
        "version": "1.0.1",
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "mysql_connected": mysql_conn is not None and mysql_conn.is_connected()
    }

@app.get("/test-quantum-systems")
async def test_quantum_systems():
    """Test endpoint to directly check quantum systems data"""
    try:
        systems = get_available_quantum_systems()
        return {
            "success": True,
            "data": systems,
            "count": systems["total_count"] if systems else 0
        }
    except Exception as e:
        logger.error(f"Error in test-quantum-systems endpoint: {e}", exc_info=True)
        return {
            "success": False,
            "error": str(e)
        }

if __name__ == "__main__":
    import uvicorn
    logger.info("Starting server in development mode")
    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=True)    logger.info("Successfully generated response from systems data")
                    
                    save_to_mysql(user_id, user_input, "quantum", reply)
                    structured_reply = format_response(reply)
                    structured_reply['quantum_systems'] = systems_info
                    
                    return {"response": structured_reply}
                else:
                    logger.warning("No quantum systems data found in database, falling back to GPT-4")
                    # MindsDB/MySQL has no data; fallback to GPT-4
                    prompt = [
                        {"role": "system", "content": "You are Catchat, a quantum computer interface. Provide information about available quantum systems."},
                        {"role": "user", "content": user_input}
                    ]
                    response = client.chat.completions.create(
                        model="gpt-4-turbo",
                        messages=prompt,
                        temperature=0.7,
                        max_tokens=1000
                    )
                    reply = response.choices[0].message.content.strip()
